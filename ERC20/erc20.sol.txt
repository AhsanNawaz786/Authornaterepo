pragma solidity ^0.8.0;

import 'ierc20.sol';
import 'ierc20metadata.sol';
//Creating ERC20 Tokens 

contract ERC20 is ierc20, ierc20metadata{
    mapping(address=>uint256) private _balance;              ///owner 
    mapping(address=>mapping(address=>uint256)) private _allownces;    ///owner to spender
    
    uint256 public _totalsupply;                                                        
    address public owner;
    sring public _name;
    string public  _symbol;

constructor(string memory name_,  string memory symbol_){
    _name= name_;
    _symbol= symbol_;
}

    function name() public view virtual override returns(string memory){
        return _name;
    }
    function  symbol() public view virtual override returns(string memory){
        return _symbol;
    }
    
    
    function decimal() public view virtual override returns(uint8){
        return 16;
    }
    
    
    function totalsupply() public view virtual override returns(uint256){
        return _totalsupply;
    }
    
    function balanceOf(address account) public view virtual  override returns(uint256){
        return _balance[account];
    }
    
    function transfer(address recipient, uint256 amount) public virtual override returns(bool){
        _transfer=(msg.sender,recipient,amount);
        return true;
    } 
    
    function allownce(address owner, address spender) public view virtual override returns(uint256) {
        return _allownces[owner][spender];
        
    }
    
    function approve(address spender, uint256 amount) public virtual override returns(bool){
        
        _approve(msg.sender,spender, amount);
        return true;
    }
    
    
    function transferFrom(address sender, address spender, uint256 amount) public virtual override returns(bool){
        _transfer(sender,spender,amount);
        uint256 currentAllownces = _allownces[sender][msg.sender];
        require(currentAllownces >= amount, "ERC20: Allowed to transfer amount");
        unchecked {
            _approve(sender, msg.sender, currentAllowance - amount);
        }

        return true;
    }
    
    function IncreaseAllownce(address spender, uint256 Addedvalue) public virtual override returns(bool){
        _approve(msg.sender, spender, _allownces[msg.sender][spender]+Addedvalue);
        return true;
        
    }
    
    function decreaseAllowance(address spender, uint subtractedvalue) public virtual override returns(bool){
        uint256 currentAllowance = _allowances[msg.sender][spender];
        require(currentAllowance >= subtractedvalue, "ERC20: decreased allowance below zero");
        unchecked {
            _approve(msg.sender, spender, currentAllowance - subtractedValue);
        }

        return true;
    }
    
       function _transfer(
        address sender,
        address recipient,
        uint256 amount
    ) internal virtual {
        require(sender != address(0), "ERC20: transfer from the zero address");
        require(recipient != address(0), "ERC20: transfer to the zero address");

        _beforeTokenTransfer(sender, recipient, amount);

        uint256 senderBalance = _balances[sender];
        require(senderBalance >= amount, "ERC20: transfer amount exceeds balance");
        unchecked {
            _balances[sender] = senderBalance - amount;
        }
        _balances[recipient] += amount;

        emit Transfer(sender, recipient, amount);

        _afterTokenTransfer(sender, recipient, amount);
    }
    
    
        function _mint(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: mint to the zero address");

        _beforeTokenTransfer(address(0), account, amount);

        _totalSupply += amount;
        _balances[account] += amount;
        emit Transfer(address(0), account, amount);

        _afterTokenTransfer(address(0), account, amount);
    }
    
    
        function _burn(address account, uint256 amount) internal virtual {
        require(account != address(0), "ERC20: burn from the zero address");

        _beforeTokenTransfer(account, address(0), amount);

        uint256 accountBalance = _balances[account];
        require(accountBalance >= amount, "ERC20: burn amount exceeds balance");
        unchecked {
            _balances[account] = accountBalance - amount;
        }
        _totalSupply -= amount;

        emit Transfer(account, address(0), amount);

        _afterTokenTransfer(account, address(0), amount);
    }
    
        function _approve(
        address owner,
        address spender,
        uint256 amount
    ) internal virtual {
        require(owner != address(0), "ERC20: approve from the zero address");
        require(spender != address(0), "ERC20: approve to the zero address");

        _allowances[owner][spender] = amount;
        emit Approval(owner, spender, amount);
    }
    
    
        function _beforeTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {
        
    }
    
        function _afterTokenTransfer(
        address from,
        address to,
        uint256 amount
    ) internal virtual {}
}
    
    
    
    
    
    
    

    
    
        
    
